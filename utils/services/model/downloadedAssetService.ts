// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { DownloadedAssetType, DownloadedAssetTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const downloadedAssetService = {
  searchDownloadedAsset,
  findDownloadedAsset,
  createDownloadedAsset,
  updateDownloadedAsset,
  deleteDownloadedAsset,
};

function searchDownloadedAsset(query?: MobilettoOrmFindApiOpts): Promise<DownloadedAssetType[]> {
  return $fetch("/api/model/downloadedAsset", a.authPostJson(query)).then(a.handleJsonResponse<DownloadedAssetType[]>);
}

function findDownloadedAsset(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<DownloadedAssetType> {
  return $fetch(`/api/model/downloadedAsset/${id}`, a.authGet())
    .then(a.handleJsonResponse<DownloadedAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<DownloadedAssetType>;
}

function createDownloadedAsset(
  downloadedAsset: DownloadedAssetType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<DownloadedAssetType> {
  const id = DownloadedAssetTypeDef.id(downloadedAsset);
  return $fetch(`/api/model/downloadedAsset/${id}`, a.authPutJson(downloadedAsset))
    .then(a.handleJsonResponse<DownloadedAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<DownloadedAssetType>;
}

function updateDownloadedAsset(
  downloadedAsset: DownloadedAssetType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<DownloadedAssetType> {
  const id = DownloadedAssetTypeDef.id(downloadedAsset);
  return $fetch(`/api/model/downloadedAsset/${id}`, a.authPatchJson(downloadedAsset))
    .then(a.handleJsonResponse<DownloadedAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<DownloadedAssetType>;
}

function deleteDownloadedAsset(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/downloadedAsset/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<DownloadedAssetType>;
}
