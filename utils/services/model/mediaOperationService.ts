// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { MediaOperationType, MediaOperationTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const mediaOperationService = {
  searchMediaOperation,
  findMediaOperation,
  createMediaOperation,
  updateMediaOperation,
  deleteMediaOperation,
};

function searchMediaOperation(query?: MobilettoOrmFindApiOpts): Promise<MediaOperationType[]> {
  return $fetch("/api/model/mediaOperation", a.authPostJson(query)).then(a.handleJsonResponse<MediaOperationType[]>);
}

function findMediaOperation(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<MediaOperationType> {
  return $fetch(`/api/model/mediaOperation/${id}`, a.authGet())
    .then(a.handleJsonResponse<MediaOperationType>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaOperationType>;
}

function createMediaOperation(
  mediaOperation: MediaOperationType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<MediaOperationType> {
  const id = MediaOperationTypeDef.id(mediaOperation);
  return $fetch(`/api/model/mediaOperation/${id}`, a.authPutJson(mediaOperation))
    .then(a.handleJsonResponse<MediaOperationType>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaOperationType>;
}

function updateMediaOperation(
  mediaOperation: MediaOperationType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<MediaOperationType> {
  const id = MediaOperationTypeDef.id(mediaOperation);
  return $fetch(`/api/model/mediaOperation/${id}`, a.authPatchJson(mediaOperation))
    .then(a.handleJsonResponse<MediaOperationType>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaOperationType>;
}

function deleteMediaOperation(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/mediaOperation/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaOperationType>;
}
