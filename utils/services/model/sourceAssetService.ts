// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { SourceAssetType, SourceAssetTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const sourceAssetService = {
  searchSourceAsset,
  findSourceAsset,
  createSourceAsset,
  updateSourceAsset,
  deleteSourceAsset,
};

function searchSourceAsset(query?: MobilettoOrmFindApiOpts): Promise<SourceAssetType[]> {
  return $fetch("/api/model/sourceAsset", a.authPostJson(query)).then(a.handleJsonResponse<SourceAssetType[]>);
}

function findSourceAsset(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<SourceAssetType> {
  return $fetch(`/api/model/sourceAsset/${id}`, a.authGet())
    .then(a.handleJsonResponse<SourceAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<SourceAssetType>;
}

function createSourceAsset(
  sourceAsset: SourceAssetType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<SourceAssetType> {
  const id = SourceAssetTypeDef.id(sourceAsset);
  return $fetch(`/api/model/sourceAsset/${id}`, a.authPutJson(sourceAsset))
    .then(a.handleJsonResponse<SourceAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<SourceAssetType>;
}

function updateSourceAsset(
  sourceAsset: SourceAssetType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<SourceAssetType> {
  const id = SourceAssetTypeDef.id(sourceAsset);
  return $fetch(`/api/model/sourceAsset/${id}`, a.authPatchJson(sourceAsset))
    .then(a.handleJsonResponse<SourceAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<SourceAssetType>;
}

function deleteSourceAsset(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/sourceAsset/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<SourceAssetType>;
}
