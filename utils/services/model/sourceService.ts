// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { SourceType, SourceTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const sourceService = {
  searchSource,
  findSource,
  createSource,
  updateSource,
  deleteSource,
};

function searchSource(query?: MobilettoOrmFindApiOpts): Promise<SourceType[]> {
  return $fetch("/api/model/source", a.authPostJson(query)).then(a.handleJsonResponse<SourceType[]>);
}

function findSource(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<SourceType> {
  return $fetch(`/api/model/source/${id}`, a.authGet())
    .then(a.handleJsonResponse<SourceType>)
    .catch(a.handleErrors(serverErrors)) as Promise<SourceType>;
}

function createSource(
  source: SourceType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<SourceType> {
  const id = SourceTypeDef.id(source);
  return $fetch(`/api/model/source/${id}`, a.authPutJson(source))
    .then(a.handleJsonResponse<SourceType>)
    .catch(a.handleErrors(serverErrors)) as Promise<SourceType>;
}

function updateSource(
  source: SourceType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<SourceType> {
  const id = SourceTypeDef.id(source);
  return $fetch(`/api/model/source/${id}`, a.authPatchJson(source))
    .then(a.handleJsonResponse<SourceType>)
    .catch(a.handleErrors(serverErrors)) as Promise<SourceType>;
}

function deleteSource(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/source/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<SourceType>;
}
