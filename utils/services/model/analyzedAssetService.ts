// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { AnalyzedAssetType, AnalyzedAssetTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const analyzedAssetService = {
  searchAnalyzedAsset,
  findAnalyzedAsset,
  createAnalyzedAsset,
  updateAnalyzedAsset,
  deleteAnalyzedAsset,
};

function searchAnalyzedAsset(query?: MobilettoOrmFindApiOpts): Promise<AnalyzedAssetType[]> {
  return $fetch("/api/model/analyzedAsset", a.authPostJson(query)).then(a.handleJsonResponse<AnalyzedAssetType[]>);
}

function findAnalyzedAsset(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<AnalyzedAssetType> {
  return $fetch(`/api/model/analyzedAsset/${id}`, a.authGet())
    .then(a.handleJsonResponse<AnalyzedAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<AnalyzedAssetType>;
}

function createAnalyzedAsset(
  analyzedAsset: AnalyzedAssetType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<AnalyzedAssetType> {
  const id = AnalyzedAssetTypeDef.id(analyzedAsset);
  return $fetch(`/api/model/analyzedAsset/${id}`, a.authPutJson(analyzedAsset))
    .then(a.handleJsonResponse<AnalyzedAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<AnalyzedAssetType>;
}

function updateAnalyzedAsset(
  analyzedAsset: AnalyzedAssetType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<AnalyzedAssetType> {
  const id = AnalyzedAssetTypeDef.id(analyzedAsset);
  return $fetch(`/api/model/analyzedAsset/${id}`, a.authPatchJson(analyzedAsset))
    .then(a.handleJsonResponse<AnalyzedAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<AnalyzedAssetType>;
}

function deleteAnalyzedAsset(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/analyzedAsset/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<AnalyzedAssetType>;
}
