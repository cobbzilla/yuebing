// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { UploadJobType, UploadJobTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const uploadJobService = {
  searchUploadJob,
  findUploadJob,
  createUploadJob,
  updateUploadJob,
  deleteUploadJob,
};

function searchUploadJob(query?: MobilettoOrmFindApiOpts): Promise<UploadJobType[]> {
  return $fetch("/api/model/uploadJob", a.authPostJson(query)).then(a.handleJsonResponse<UploadJobType[]>);
}

function findUploadJob(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<UploadJobType> {
  return $fetch(`/api/model/uploadJob/${id}`, a.authGet())
    .then(a.handleJsonResponse<UploadJobType>)
    .catch(a.handleErrors(serverErrors)) as Promise<UploadJobType>;
}

function createUploadJob(
  uploadJob: UploadJobType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<UploadJobType> {
  const id = UploadJobTypeDef.id(uploadJob);
  return $fetch(`/api/model/uploadJob/${id}`, a.authPutJson(uploadJob))
    .then(a.handleJsonResponse<UploadJobType>)
    .catch(a.handleErrors(serverErrors)) as Promise<UploadJobType>;
}

function updateUploadJob(
  uploadJob: UploadJobType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<UploadJobType> {
  const id = UploadJobTypeDef.id(uploadJob);
  return $fetch(`/api/model/uploadJob/${id}`, a.authPatchJson(uploadJob))
    .then(a.handleJsonResponse<UploadJobType>)
    .catch(a.handleErrors(serverErrors)) as Promise<UploadJobType>;
}

function deleteUploadJob(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/uploadJob/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<UploadJobType>;
}
