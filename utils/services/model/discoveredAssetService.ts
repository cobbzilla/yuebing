// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults } from "mobiletto-orm-typedef";
import { MobilettoOrmValidationErrors } from "mobiletto-orm";
import { DiscoveredAssetType, DiscoveredAssetTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const discoveredAssetService = {
  searchDiscoveredAsset,
  findDiscoveredAsset,
  createDiscoveredAsset,
  updateDiscoveredAsset,
  deleteDiscoveredAsset,
};

function searchDiscoveredAsset(query?: MobilettoOrmFindApiOpts): Promise<DiscoveredAssetType[]> {
  return $fetch("/api/model/discoveredAsset", a.authPostJson(query)).then(a.handleJsonResponse<DiscoveredAssetType[]>);
}

function findDiscoveredAsset(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<DiscoveredAssetType> {
  return $fetch(`/api/model/discoveredAsset/${id}`, a.authGet())
    .then(a.handleJsonResponse<DiscoveredAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<DiscoveredAssetType>;
}

function createDiscoveredAsset(
  discoveredAsset: DiscoveredAssetType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<DiscoveredAssetType> {
  const id = DiscoveredAssetTypeDef.id(discoveredAsset);
  return $fetch(`/api/model/discoveredAsset/${id}`, a.authPutJson(discoveredAsset))
    .then(a.handleJsonResponse<DiscoveredAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<DiscoveredAssetType>;
}

function updateDiscoveredAsset(
  discoveredAsset: DiscoveredAssetType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<DiscoveredAssetType> {
  const id = DiscoveredAssetTypeDef.id(discoveredAsset);
  return $fetch(`/api/model/discoveredAsset/${id}`, a.authPatchJson(discoveredAsset))
    .then(a.handleJsonResponse<DiscoveredAssetType>)
    .catch(a.handleErrors(serverErrors)) as Promise<DiscoveredAssetType>;
}

function deleteDiscoveredAsset(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/discoveredAsset/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<DiscoveredAssetType>;
}
