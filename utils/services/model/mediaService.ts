// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { MediaType, MediaTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const mediaService = {
  searchMedia,
  findMedia,
  createMedia,
  updateMedia,
  deleteMedia,
};

function searchMedia(query?: MobilettoOrmFindApiOpts): Promise<MediaType[]> {
  return $fetch("/api/model/media", a.authPostJson(query)).then(a.handleJsonResponse<MediaType[]>);
}

function findMedia(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<MediaType> {
  return $fetch(`/api/model/media/${id}`, a.authGet())
    .then(a.handleJsonResponse<MediaType>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaType>;
}

function createMedia(
  media: MediaType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<MediaType> {
  const id = MediaTypeDef.id(media);
  return $fetch(`/api/model/media/${id}`, a.authPutJson(media))
    .then(a.handleJsonResponse<MediaType>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaType>;
}

function updateMedia(
  media: MediaType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<MediaType> {
  const id = MediaTypeDef.id(media);
  return $fetch(`/api/model/media/${id}`, a.authPatchJson(media))
    .then(a.handleJsonResponse<MediaType>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaType>;
}

function deleteMedia(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/media/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaType>;
}
