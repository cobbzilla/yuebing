// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { LibraryScanType, LibraryScanTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const libraryScanService = {
  searchLibraryScan,
  findLibraryScan,
  createLibraryScan,
  updateLibraryScan,
  deleteLibraryScan,
};

function searchLibraryScan(query?: MobilettoOrmFindApiOpts): Promise<LibraryScanType[]> {
  return $fetch("/api/model/libraryScan", a.authPostJson(query)).then(a.handleJsonResponse<LibraryScanType[]>);
}

function findLibraryScan(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<LibraryScanType> {
  return $fetch(`/api/model/libraryScan/${id}`, a.authGet())
    .then(a.handleJsonResponse<LibraryScanType>)
    .catch(a.handleErrors(serverErrors)) as Promise<LibraryScanType>;
}

function createLibraryScan(
  libraryScan: LibraryScanType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<LibraryScanType> {
  const id = LibraryScanTypeDef.id(libraryScan);
  return $fetch(`/api/model/libraryScan/${id}`, a.authPutJson(libraryScan))
    .then(a.handleJsonResponse<LibraryScanType>)
    .catch(a.handleErrors(serverErrors)) as Promise<LibraryScanType>;
}

function updateLibraryScan(
  libraryScan: LibraryScanType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<LibraryScanType> {
  const id = LibraryScanTypeDef.id(libraryScan);
  return $fetch(`/api/model/libraryScan/${id}`, a.authPatchJson(libraryScan))
    .then(a.handleJsonResponse<LibraryScanType>)
    .catch(a.handleErrors(serverErrors)) as Promise<LibraryScanType>;
}

function deleteLibraryScan(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/libraryScan/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<LibraryScanType>;
}
