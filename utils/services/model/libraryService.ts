// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { LibraryType, LibraryTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const libraryService = {
  searchLibrary,
  findLibrary,
  createLibrary,
  updateLibrary,
  deleteLibrary,
};

function searchLibrary(query?: MobilettoOrmFindApiOpts): Promise<LibraryType[]> {
  return $fetch("/api/model/library", a.authPostJson(query)).then(a.handleJsonResponse<LibraryType[]>);
}

function findLibrary(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<LibraryType> {
  return $fetch(`/api/model/library/${id}`, a.authGet())
    .then(a.handleJsonResponse<LibraryType>)
    .catch(a.handleErrors(serverErrors)) as Promise<LibraryType>;
}

function createLibrary(
  library: LibraryType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<LibraryType> {
  const id = LibraryTypeDef.id(library);
  return $fetch(`/api/model/library/${id}`, a.authPutJson(library))
    .then(a.handleJsonResponse<LibraryType>)
    .catch(a.handleErrors(serverErrors)) as Promise<LibraryType>;
}

function updateLibrary(
  library: LibraryType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<LibraryType> {
  const id = LibraryTypeDef.id(library);
  return $fetch(`/api/model/library/${id}`, a.authPatchJson(library))
    .then(a.handleJsonResponse<LibraryType>)
    .catch(a.handleErrors(serverErrors)) as Promise<LibraryType>;
}

function deleteLibrary(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/library/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<LibraryType>;
}
