// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { MobilettoOrmObject, MobilettoOrmPurgeResults, MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { MediaPropertyType, MediaPropertyTypeDef } from "yuebing-model";
import * as a from "~/utils/model/serviceHelper.js";

export const mediaPropertyService = {
  searchMediaProperty,
  findMediaProperty,
  createMediaProperty,
  updateMediaProperty,
  deleteMediaProperty,
};

function searchMediaProperty(query?: MobilettoOrmFindApiOpts): Promise<MediaPropertyType[]> {
  return $fetch("/api/model/mediaProperty", a.authPostJson(query)).then(a.handleJsonResponse<MediaPropertyType[]>);
}

function findMediaProperty(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<MediaPropertyType> {
  return $fetch(`/api/model/mediaProperty/${id}`, a.authGet())
    .then(a.handleJsonResponse<MediaPropertyType>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaPropertyType>;
}

function createMediaProperty(
  mediaProperty: MediaPropertyType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<MediaPropertyType> {
  const id = MediaPropertyTypeDef.id(mediaProperty);
  return $fetch(`/api/model/mediaProperty/${id}`, a.authPutJson(mediaProperty))
    .then(a.handleJsonResponse<MediaPropertyType>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaPropertyType>;
}

function updateMediaProperty(
  mediaProperty: MediaPropertyType,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
): Promise<MediaPropertyType> {
  const id = MediaPropertyTypeDef.id(mediaProperty);
  return $fetch(`/api/model/mediaProperty/${id}`, a.authPatchJson(mediaProperty))
    .then(a.handleJsonResponse<MediaPropertyType>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaPropertyType>;
}

function deleteMediaProperty(
  id: string,
  serverErrors: Ref<MobilettoOrmValidationErrors>,
  purge?: boolean
): Promise<MobilettoOrmObject | MobilettoOrmPurgeResults> {
  return $fetch(`/api/model/mediaProperty/${id}/${purge ? `?purge=${purge}` : ""}`, a.authDelete())
    .then(a.handleJsonResponse<MobilettoOrmObject | MobilettoOrmPurgeResults>)
    .catch(a.handleErrors(serverErrors)) as Promise<MediaPropertyType>;
}
