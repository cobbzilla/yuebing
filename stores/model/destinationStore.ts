// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { defineStore } from "pinia";
import { MobilettoOrmValidationErrors } from "mobiletto-orm";
import { DestinationType, DestinationTypeDef } from "yuebing-model";
import { destinationService } from "~/utils/services/model/destinationService";

const updateList = (list: DestinationType[] | null, id: string, opts?: { destination?: DestinationType, remove?: boolean }) => {
  if (!opts) return;
  if (list) {
    const foundIndex = list.findIndex((e) => DestinationTypeDef.id(e) === id);
    if (foundIndex && foundIndex >= 0) {
      if (opts && opts.remove === true) {
        list.splice(foundIndex, 1);
      } else if (opts && opts.destination) {
        list.splice(foundIndex, 1, opts.destination);
      }
    }
  }
};

export const useDestinationStore = defineStore("destination", {
  state: () => ({
    destination: null as DestinationType | null,
    destinationList: null as DestinationType[] | null,
  }),
  actions: {
    async destinationLookup(id: string, serverErrors: Ref<MobilettoOrmValidationErrors>): Promise<DestinationType> {
      this.destination = await destinationService.findDestination(id, serverErrors);
      updateList(this.destinationList, DestinationTypeDef.id(this.destination), { destination: this.destination });
      return this.destination;
    },
    async destinationSearch(query?: MobilettoOrmFindApiOpts): Promise<DestinationType[]> {
      this.destinationList = await destinationService.searchDestination(query);
      return this.destinationList || [];
    },
    async destinationCreate(destination: DestinationType, serverErrors: Ref<MobilettoOrmValidationErrors>): Promise<DestinationType> {
      this.destination = await destinationService.createDestination(destination, serverErrors);
      return this.destination;
    },
    async destinationUpdate(destination: DestinationType, serverErrors: Ref<MobilettoOrmValidationErrors>): Promise<DestinationType> {
      this.destination = await destinationService.updateDestination(destination, serverErrors);
      updateList(this.destinationList, DestinationTypeDef.id(this.destination), { destination: this.destination });
      return this.destination;
    },
    async destinationDelete(destination: string, serverErrors: Ref<MobilettoOrmValidationErrors>, purge?: boolean): Promise<boolean> {
      const deleteResult = await destinationService.deleteDestination(destination, serverErrors, !!purge);
      if (deleteResult) {
        updateList(this.destinationList, destination, serverErrors, { remove: true });
        return true;
      }
      return false
    },
  },
});
