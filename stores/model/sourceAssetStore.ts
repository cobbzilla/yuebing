// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { defineStore } from "pinia";
import { MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { SourceAssetType, SourceAssetTypeDef } from "yuebing-model";
import { sourceAssetService } from "~/utils/services/model/sourceAssetService";
import { MobilettoOrmFindApiOpts, updateOrmList } from "~/utils/model/storeHelper.js";

const updateList = (list: SourceAssetType[] | null, id: string, opts?: { object?: SourceAssetType; remove?: boolean }) => {
  return updateOrmList<SourceAssetType>(SourceAssetTypeDef, list, id, opts);
};

export const useSourceAssetStore = defineStore("sourceAsset", {
  state: () => ({
    finding: false,
    found: null as SourceAssetType | null,
    creating: false,
    created: null as SourceAssetType | null,
    updating: false,
    updated: null as SourceAssetType | null,
    deleting: false,
    deleted: null as boolean | null,
    searching: false,
    sourceAssetList: null as SourceAssetType[] | null,
  }),
  getters: {
      sourceAssetBusy: (state) => state.finding || state.creating || state.updating || state.deleting || state.searching,
  },
  actions: {
    async lookup(id: string, serverErrors: Ref<MobilettoOrmValidationErrors>): Promise<SourceAssetType> {
      this.found = null;
      this.finding = true;
      try {
        this.found = await sourceAssetService.findSourceAsset(id, serverErrors);
        if (this.found) {
          updateList(this.sourceAssetList, SourceAssetTypeDef.id(this.found), {object: this.found});
        }
        return this.found;
      } finally {
        this.finding = false;
      }
    },
    async search(query?: MobilettoOrmFindApiOpts): Promise<SourceAssetType[]> {
      try {
        this.searching = true;
        this.sourceAssetList = await sourceAssetService.searchSourceAsset(query);
        return this.sourceAssetList || [];
      } finally {
        this.searching = false;
      }
    },
    async create(object: SourceAssetType, serverErrors: Ref<MobilettoOrmValidationErrors>): Promise<SourceAssetType> {
      try {
        this.created = null;
        this.creating = true;
        this.created = await sourceAssetService.createSourceAsset(object, serverErrors);
        return this.created;
      } finally {
        this.creating = false;
      }
    },
    async update(object: SourceAssetType, serverErrors: Ref<MobilettoOrmValidationErrors>): Promise<SourceAssetType> {
      try {
        this.updated = null;
        this.updating = true;
        this.updated = await sourceAssetService.updateSourceAsset(object, serverErrors);
        if (this.updated) {
          updateList(this.sourceAssetList, SourceAssetTypeDef.id(this.updated), {object: this.updated});
        }
        return this.updated;
      } finally {
        this.updating = false;
      }
    },
    async delete(id: string, serverErrors: Ref<MobilettoOrmValidationErrors>, purge?: boolean): Promise<boolean> {
      try {
        this.deleted = null;
        this.deleting = true;
        const deleteResult = await sourceAssetService.deleteSourceAsset(id, serverErrors, !!purge);
        if (deleteResult) {
          updateList(this.sourceAssetList, id, { remove: true });
          this.deleted = true;
        } else {
          this.deleted = false;
        }
        return this.deleted;
      } finally {
        this.deleting = false;
      }
    },
  },
});
