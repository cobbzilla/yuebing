// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { Ref } from "vue";
import { defineStore } from "pinia";
import { MobilettoOrmValidationErrors } from "mobiletto-orm-typedef";
import { UploadJobType, UploadJobTypeDef } from "yuebing-model";
import { uploadJobService } from "~/utils/services/model/uploadJobService";
import { MobilettoOrmFindApiOpts, updateOrmList } from "~/utils/model/storeHelper.js";

const updateList = (list: UploadJobType[] | null, id: string, opts?: { object?: UploadJobType; remove?: boolean }) => {
  return updateOrmList<UploadJobType>(UploadJobTypeDef, list, id, opts);
};

export const useUploadJobStore = defineStore("uploadJob", {
  state: () => ({
    finding: false,
    found: null as UploadJobType | null,
    creating: false,
    created: null as UploadJobType | null,
    updating: false,
    updated: null as UploadJobType | null,
    deleting: false,
    deleted: null as boolean | null,
    searching: false,
    uploadJobList: null as UploadJobType[] | null,
  }),
  getters: {
      uploadJobBusy: (state) => state.finding || state.creating || state.updating || state.deleting || state.searching,
  },
  actions: {
    async lookup(id: string, serverErrors: Ref<MobilettoOrmValidationErrors>): Promise<UploadJobType> {
      this.found = null;
      this.finding = true;
      try {
        this.found = await uploadJobService.findUploadJob(id, serverErrors);
        if (this.found) {
          updateList(this.uploadJobList, UploadJobTypeDef.id(this.found), {object: this.found});
        }
        return this.found;
      } finally {
        this.finding = false;
      }
    },
    async search(query?: MobilettoOrmFindApiOpts): Promise<UploadJobType[]> {
      try {
        this.searching = true;
        this.uploadJobList = await uploadJobService.searchUploadJob(query);
        return this.uploadJobList || [];
      } finally {
        this.searching = false;
      }
    },
    async create(object: UploadJobType, serverErrors: Ref<MobilettoOrmValidationErrors>): Promise<UploadJobType> {
      try {
        this.created = null;
        this.creating = true;
        this.created = await uploadJobService.createUploadJob(object, serverErrors);
        return this.created;
      } finally {
        this.creating = false;
      }
    },
    async update(object: UploadJobType, serverErrors: Ref<MobilettoOrmValidationErrors>): Promise<UploadJobType> {
      try {
        this.updated = null;
        this.updating = true;
        this.updated = await uploadJobService.updateUploadJob(object, serverErrors);
        if (this.updated) {
          updateList(this.uploadJobList, UploadJobTypeDef.id(this.updated), {object: this.updated});
        }
        return this.updated;
      } finally {
        this.updating = false;
      }
    },
    async delete(id: string, serverErrors: Ref<MobilettoOrmValidationErrors>, purge?: boolean): Promise<boolean> {
      try {
        this.deleted = null;
        this.deleting = true;
        const deleteResult = await uploadJobService.deleteUploadJob(id, serverErrors, !!purge);
        if (deleteResult) {
          updateList(this.uploadJobList, id, { remove: true });
          this.deleted = true;
        } else {
          this.deleted = false;
        }
        return this.deleted;
      } finally {
        this.deleting = false;
      }
    },
  },
});
