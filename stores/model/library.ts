// DO NOT EDIT THIS FILE. AUTO-GENERATED BY mobiletto-orm-typedef-gen

import { defineStore } from "pinia";
import { LibraryType, LibraryTypeDef } from "yuebing-model";
import { libraryService } from "~/utils/services/model/libraryService";

const updateList = (list: LibraryType[] | null, id: string, remove?: { remove?: boolean }) => {
  if (list) {
    const foundIndex = list.findIndex((e) => LibraryTypeDef.id(e) === id);
    if (foundIndex && foundIndex >= 0) {
      if (remove && remove.remove === true) {
        list.splice(foundIndex, 1);
      } else {
        list.splice(foundIndex, 1, this.library);
      }
    }
  }
};

export const useLibraryStore = defineStore("library", {
  state: () => ({
    library: null as LibraryType | null,
    libraryList: null as LibraryType[] | null,
  }),
  actions: {
    async libraryLookup(id: string): Promise<void> {
      this.library = await libraryService.findLibrary(id);
      updateList(this.libraryList, LibraryTypeDef.id(this.library));
    },
    async librarySearch(query?: MobilettoOrmFindApiOpts): Promise<void> {
      this.libraryList = await libraryService.searchLibrary(query);
    },
    async libraryCreate(library: LibraryType): Promise<void> {
      this.library = await libraryService.createLibrary(library);
      updateList(this.libraryList, LibraryTypeDef.id(this.library));
    },
    async libraryUpdate(library: LibraryType): Promise<void> {
      this.library = await libraryService.updateLibrary(library);
      updateList(this.libraryList, LibraryTypeDef.id(this.library));
    },
    async libraryDelete(library: string): Promise<void> {
      await libraryService.deleteLibrary(library);
      updateList(this.libraryList, library, { remove: true });
    },
  },
});
